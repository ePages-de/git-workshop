<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git Workshop</title><link>https://git-workshop.epages.works/</link><description>Recent content on Git Workshop</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><atom:link href="https://git-workshop.epages.works/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://git-workshop.epages.works/slides/basic-concepts/00_titel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/basic-concepts/00_titel/</guid><description> Grundkonzepte</description></item><item><title/><link>https://git-workshop.epages.works/slides/basic-concepts/01_agenda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/basic-concepts/01_agenda/</guid><description> Agenda Motivation Versionskontrollsysteme Vorstellung Git Grundbegriffe</description></item><item><title/><link>https://git-workshop.epages.works/slides/basic-concepts/02_motivation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/basic-concepts/02_motivation/</guid><description> Motivation Versionsverwaltung macht man automatisch Backups Dinge ausprobieren Spontane Versionsverwaltung Vorteile kein Denkaufwand Backups Nachteile Chaos Nicht geeignet für mittelgroße Teams Archivdateien Vorteile Backups Ordentliche Struktur Nachteile Teamarbeit schwierig Wer hat wann was gemacht? Warum? Flutter</description></item><item><title/><link>https://git-workshop.epages.works/slides/basic-concepts/03_definition-scm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/basic-concepts/03_definition-scm/</guid><description> Versionskontrollsysteme Hauptaufgaben Koordinierung Wiederherstellung Versionsverwaltung Protokollierung Koordinierung Zusammenführung von Änderungen Rechteverwaltung Wiederherstellung Fehler zurückrollen Versionsverwaltung Kopien mit Varianten Organisation Teststufen (Alpha, Beta) Protokollierung Wer hat wann was gemacht? Warum? Zentraler Server Client-Server-System Zugriff über Netzwerk nur Server kennt Historie Verteilte Systeme ohne zentrales Archiv Beispiele Zentraler Server Verteilte Systeme CVS (1989) SVN (2000) Mercurial (2005) Git (2005)</description></item><item><title/><link>https://git-workshop.epages.works/slides/basic-concepts/04_vorstellung-git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/basic-concepts/04_vorstellung-git/</guid><description> Vorstellung Git Git ist eins von vielen verschiedenen Versionskontrollsystemen. Nutzungsstatistik https://insights.stackoverflow.com/survey/2018#work Beispiele Linux Apache Foundation Free Software Foundation Eclipse Foundation OpenJDK NodeJS Docker Historie 2005 - Erfunden von Linus Torvalds 2007 - Gründung von GitHub 2014 - Überholung von SVN 2015 - 69,3% Marktanteil 2018 - Microsoft kauft GitHub 2018 - 87,2% Marktanteil Vorteile Markführer Performance kein Server notwendig Verfügbar für Windows, MacOS und Linux Nachteile Steile Lernkurve Windows Support Konzepte hinter Git Viele Tools Clients Kommandozeile GUI IDE</description></item><item><title/><link>https://git-workshop.epages.works/slides/basic-concepts/05_grundbegriffe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/basic-concepts/05_grundbegriffe/</guid><description>Grundbegriffe Commit Änderungen und Metadaten Branch Referenz auf einen Commit Kette von Commit Branch = Version Branch Referenz auf Commit Commit hat wiederum Refenenz auf Parent = Liste Tag Referenz auf einen Commit Repository Container für Commits, Branches, Tags, etc. Repository Grundbegriffe Begriff Definition Commmit Änderungen an Textdateien und Beschreibungsdaten Branch (dt.</description></item><item><title/><link>https://git-workshop.epages.works/slides/basic-concepts/06_zusammenfassung/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/basic-concepts/06_zusammenfassung/</guid><description> Zusammenfassung Motivation SCM Einführung Git Grundbegriffe</description></item><item><title/><link>https://git-workshop.epages.works/slides/everyday-collaboration/00_title/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/everyday-collaboration/00_title/</guid><description> Zusammenarbeit</description></item><item><title/><link>https://git-workshop.epages.works/slides/everyday-collaboration/01_agenda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/everyday-collaboration/01_agenda/</guid><description> Agenda Scrum Team Ticket erstellen Branch anlegen Pull Request erstellen Code review Deployment</description></item><item><title/><link>https://git-workshop.epages.works/slides/everyday-collaboration/02_scrum-team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/everyday-collaboration/02_scrum-team/</guid><description> Scrum Team</description></item><item><title/><link>https://git-workshop.epages.works/slides/everyday-collaboration/03_ticket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/everyday-collaboration/03_ticket/</guid><description> Ticket</description></item><item><title/><link>https://git-workshop.epages.works/slides/everyday-collaboration/04_create-branch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/everyday-collaboration/04_create-branch/</guid><description> Branch erstellen git checkout main git pull upstream main git checkout -b issue/GH-9_image-size</description></item><item><title/><link>https://git-workshop.epages.works/slides/everyday-collaboration/05_create-pr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/everyday-collaboration/05_create-pr/</guid><description> Pull Request erstellen git add . git commit -m "GH-9: Scale down large images in tutorials" git push origin issue/GH-9_image-size nach dem PR, warten auf Testergebnisse</description></item><item><title/><link>https://git-workshop.epages.works/slides/everyday-collaboration/06_code-review/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/everyday-collaboration/06_code-review/</guid><description> Code review ggf. "Request changes" letztendlich "Approve"</description></item><item><title/><link>https://git-workshop.epages.works/slides/everyday-collaboration/07_deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/everyday-collaboration/07_deployment/</guid><description> Deployment Ausführung von Unit Tests Generierung von Release Testen von Release Automatisches Ausrollen</description></item><item><title/><link>https://git-workshop.epages.works/slides/everyday-collaboration/08_zusammenfassung/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/everyday-collaboration/08_zusammenfassung/</guid><description> Zusammenfassung</description></item><item><title/><link>https://git-workshop.epages.works/slides/overview-github/00_title/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/overview-github/00_title/</guid><description> Einstieg GitHub</description></item><item><title/><link>https://git-workshop.epages.works/slides/overview-github/01_agenda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/overview-github/01_agenda/</guid><description> Agenda Features Private Accounts Repositories Organisationen</description></item><item><title/><link>https://git-workshop.epages.works/slides/overview-github/02_features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/overview-github/02_features/</guid><description>Features Hosting Open Source Projekte Organisationen Individuen Projektverwaltung GitHub Pages ... Hosting Open Source Projekte Quasi standard Alternativen: GitLab, BitBucket Linux, OpenJDK, Kubernetes Organisationen Einnahmequelle: $4 / Nutzer / Monat Private Repositories Team Verwaltung (Berechtigungen usw.) Individuen Kostenlos (mit Einschränkungen) Private Projekte Öffentliche Projekte (alle Features) Projektverwaltung Issues: Beschreibung von Features und Bugs Projects: Boards für Projekte GitHub Pages Statische Webseiten direkt aus Repository Fungiert als Webserver .</description></item><item><title/><link>https://git-workshop.epages.works/slides/overview-github/03_private-accounts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/overview-github/03_private-accounts/</guid><description> Privater Account</description></item><item><title/><link>https://git-workshop.epages.works/slides/overview-github/04_repository-anlegen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/overview-github/04_repository-anlegen/</guid><description> Repository anlegen</description></item><item><title/><link>https://git-workshop.epages.works/slides/overview-github/05_repository-details/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/overview-github/05_repository-details/</guid><description> Repository Details</description></item><item><title/><link>https://git-workshop.epages.works/slides/overview-github/06_github-pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/overview-github/06_github-pages/</guid><description> GitHub Pages</description></item><item><title/><link>https://git-workshop.epages.works/slides/overview-github/07_organisationen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/slides/overview-github/07_organisationen/</guid><description> Organisationen verwaltet Repositories Öffentliche Repositories als Aushängeschild Siehe https://github.com/ePages-de in privatem Fenster Teams Übersicht über Teams Personen zu Teams zuweisen Berechtigungen für Teams</description></item><item><title>Abstimmung</title><link>https://git-workshop.epages.works/collaboration/github-issues/4_abstimmung/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/github-issues/4_abstimmung/</guid><description>Wenn Sie den Maintainern von Open Source Projekten einen Hinweis geben wollen, dass ein von jemand anderem angelegtes Ticket auch für Sie hilfreich wäre, dann können Sie das z.B. dadurch zum Ausdruck bringen, dass Sie ein &amp;ldquo;Daumen hoch&amp;rdquo; Emoji an der intialen Ticket-Beschreibung hinterlassen.
Übung Sehen Sie sich folgendes Beispiel in dem React Projekt an:
https://github.com/facebook/react/issues/13525</description></item><item><title>Anlegen von GitHub account</title><link>https://git-workshop.epages.works/installation/git-macos/2_create-github-account/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/installation/git-macos/2_create-github-account/</guid><description>Für die Übungen werden wir den am weitesten verbreiteten Online-Service für das Hosting von Git repositories nutzen. Bitte legen Sie sich hier einen kostenlosen Account dafür an:
https://github.com/join Lorem impsum dolor sit amet.</description></item><item><title>Anlegen von GitHub account</title><link>https://git-workshop.epages.works/installation/git-windows/2_create-github-account/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/installation/git-windows/2_create-github-account/</guid><description>Für die Übungen werden wir den am weitesten verbreiteten Online-Service für das Hosting von Git repositories nutzen. Bitte legen Sie sich hier einen kostenlosen Account dafür an:
https://github.com/join Alternativen von GitHub sind z.B. GitLab und BitBucket .</description></item><item><title>Anmerkungen hinzufügen</title><link>https://git-workshop.epages.works/collaboration/code-reviews/3_pr-comments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/code-reviews/3_pr-comments/</guid><description>Beim Überfahren der geänderten Zeilen mit dem Mauszeiger können sie einen blauen Button am Beginn der Zeile sehen.
Wenn Sie diesen drücken öffnet sich eine Eingabemaske, in der Sie dem Autor des Pull Requests Feedback zu dieser Zeile geben können.</description></item><item><title>Branch erstellen</title><link>https://git-workshop.epages.works/collaboration/pull-request/4_create-branch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/pull-request/4_create-branch/</guid><description>Jedes mal wenn man eine Änderung an einem Projekt macht, an dem mehrere Personen arbeiten, empfiehlt es sich zunächst einen neuen Branch anzulegen.
GitHub Desktop Wählen Sie dazu unter dem Menüpunkt &amp;ldquo;Branch&amp;rdquo; die Option &amp;ldquo;New Branch&amp;hellip;&amp;rdquo; aus.
Welchen Namen Sie Ihrem Branch geben bleibt Ihnen überlassen.
Nach der Bestätigung dieses Dialogs können Sie in der Kopfzeile von GitHub Desktop sehen, dass der Branch von dem Haupt-Branch &amp;ldquo;main&amp;rdquo; auf den von Ihnen ausgewählten gewechselt hat.</description></item><item><title>Clonen in GitHub Desktop</title><link>https://git-workshop.epages.works/setup-website/4_clone-desktop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/setup-website/4_clone-desktop/</guid><description>Öffnen Sie nun GitHub Desktop. Wählen Sie dann mit Hauptmenu &amp;ldquo;File &amp;gt; Clone Repository&amp;rdquo; aus. In dem sich öffnenden Dialog, gehen Sie zu dem Tab &amp;ldquo;URL&amp;rdquo;. Fügen Sie dann die URL in der Zwischenablage in das Eingabefeld ein. Prüfen Sie, ob in &amp;ldquo;Local Path&amp;rdquo; der richtige Pfad eingetragen ist, in das Sie das Repository kopieren möchten. Klicken Sie schließlich auf den &amp;ldquo;Clone&amp;rdquo; button.
Es öffnet sich daraufhin in GitHub Desktop das geklonte Repository.</description></item><item><title>Download und Installation</title><link>https://git-workshop.epages.works/installation/git-macos/3_download-and-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/installation/git-macos/3_download-and-installation/</guid><description>Homebrew Wenn Sie Homebrew auf Ihrem Mac installiert haben, können Sie GitHub Desktop folgendermaßen installieren:
brew install --cask github Wenn nicht, folgen Sie der nachfolgenden Beschreibung, um GitHub Desktop manuell zu installieren.
Download Laden Sie die Datei &amp;ldquo;GitHubDesktop.zip&amp;rdquo; von dieser Webseite GitHub Desktop für macOS herunter:
https://desktop.github.com
Installation Gehen Sie im Finder zu Ihrem &amp;ldquo;Downloads&amp;rdquo; Verzeichnis. Machen Sie dann einen Doppelklick auf die heruntergeladene &amp;ldquo;GitHubDesktop.zip&amp;rdquo; Datei. Damit wird die Datei &amp;ldquo;GitHub Desktop.</description></item><item><title>Download und Installation</title><link>https://git-workshop.epages.works/installation/git-windows/3_download-and-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/installation/git-windows/3_download-and-installation/</guid><description>Bitte laden Sie von dieser Webseite GitHub Desktop für Windows herunter:
https://desktop.github.com/ Nach einem Doppelklick auf das heruntergeladene Installionsprogramm ist die GitHub Desktop App verfügbar und kann z.B. über die auf dem Schreibtisch angelegte Verknüpfung gestartet werden.</description></item><item><title>Einführung</title><link>https://git-workshop.epages.works/installation/git-macos/1_introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/installation/git-macos/1_introduction/</guid><description>Für Git gibt es verschiede grafische Benutzeroberflächen. Für den Einstieg werden wir eine einfache Option wählen und dort die Grundkonzepte lernen. Diese Grundkonzepte können dann in allen anderen Tools angewendet werden, die möglicherweise einen größeren Komfort bieten.
Referenzen Übersicht über grafische Git Clients</description></item><item><title>Einführung</title><link>https://git-workshop.epages.works/installation/git-windows/1_introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/installation/git-windows/1_introduction/</guid><description>Für Git gibt es verschiede grafische Benutzeroberflächen. Für den Einstieg werden wir eine einfache Option wählen und dort die Grundkonzepte lernen. Diese Grundkonzepte können dann in allen anderen Tools angewendet werden, die möglicherweise einen größeren Komfort bieten.
Referenzen Übersicht über grafische Git Clients</description></item><item><title>Einleitung</title><link>https://git-workshop.epages.works/collaboration/code-reviews/1_introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/code-reviews/1_introduction/</guid><description>Code Reviews sind wichtig für professionelle Projekte um (1) das Wissen zu verteilen, (2) Fehler zu finden und (3) für einen hohe interne Qualität der Software zu sorgen.
Dieses Tutorial beschreibt, wie man Code Reviews durchführen kann.
Voraussetzungen Um Code Reviews durchführen zu können, brauchen Sie von dem Besitzer des Repositories die Schreibberechtigung dazu. Jemand hat in dem Repository einen Pull Request gestellt. Referenzen How to keep up your code quality &amp;ndash; epages devs blog Inviting collaborators to a personal repository</description></item><item><title>Einleitung</title><link>https://git-workshop.epages.works/collaboration/github-issues/1_einleitung/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/github-issues/1_einleitung/</guid><description>Sowohl in großen als auch kleinen Projekten ist es sinnvoll, eine Liste mit Aufgaben zu pflegen, die erledigt werden sollen. In kommerziellen Softwareprojekten werden dafür Ticketverwaltungsprogramme wie z.B. Jira oder Pivotal Tracker genutzt.
Bei Open Source Projekten ist es üblich, für diesen Zweck die in GitHub mit eingebaute Ticketverwaltung zu nutzen. Dieses Tutorial soll einen Einblick darin bieten.</description></item><item><title>Einleitung</title><link>https://git-workshop.epages.works/collaboration/merge-conflicts/1_einleitung/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/merge-conflicts/1_einleitung/</guid><description>In Projekten an denen mehrere Personen arbeiten, kommt es hin und wieder vor, dass Änderungen gemacht werden, die Git nicht mehr automatisch zusammenführen kann. Diese Situation wird auch als Merge Konflikt bezeichnet. Dieses Tutorial beschreibt die Schritte, die notwendig sind um einen Merge Konflikt aufzulösen.
Beispiel Als Beispiel betrachten wir das folgende Scenario:
Sie haben in der Datei content/links/_index.md in dem Abschnitt &amp;ldquo;Videos&amp;rdquo; einen Link zu einem neuen Video hinzugefügt.</description></item><item><title>Einleitung</title><link>https://git-workshop.epages.works/collaboration/pull-request/1_einleitung/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/pull-request/1_einleitung/</guid><description>In diesem Tutorial werden die Schritte beschrieben, die notwendig sind, um einen Pull Request (PR) in einem Open Source Projekt zu erstellen. Als Beispiel werden die Workshop Materialien des Git Workshops genutzt.
Referenzen Creating a pull request (docs.github.com)</description></item><item><title>Einleitung</title><link>https://git-workshop.epages.works/setup-website/1_einleitung/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/setup-website/1_einleitung/</guid><description>Das Ziel von diesem Tutorial ist es, die Schritte durchzugehen, welche notwendig sind für die Nutzung von Git in persönlichen Projekten.
Dazu wird zunächst über die GitHub Webseite ein neues Repository angelegt. Dann wird mit Hilfe von GitHub Desktop eine neue Datei dort publiziert. Diese wird dann letztendlich als Webseite publiziert.</description></item><item><title>Einrichtung von GitHub Desktop</title><link>https://git-workshop.epages.works/installation/git-macos/4_configure-github-desktop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/installation/git-macos/4_configure-github-desktop/</guid><description>Beim ersten Start der Anwendung sollte sie mit GitHub verknüpft werden.
Überprüfen Sie, dass in der sich nach dem Klick auf diesen Button die Webseite &amp;ldquo;github.com&amp;rdquo; mit dem &amp;ldquo;https&amp;rdquo; Protokoll geöffnet hat und geben Sie dann ihren Benutzernamen und Ihr Passwort ein.
Bestätigen Sie, dass GitHub Desktop in Ihrem Namen auf der GitHub Plattform agieren darf.
Nach der Bestätigung von dem darauf folgenden Dialog werden die zu GitHub Desktop zurück geleitet und können die Konfiguration von Git abschließen.</description></item><item><title>Einrichtung von GitHub Desktop</title><link>https://git-workshop.epages.works/installation/git-windows/4_configure-github-desktop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/installation/git-windows/4_configure-github-desktop/</guid><description>Beim ersten Start der Anwendung sollte sie mit GitHub verknüpft werden.
Überprüfen Sie, dass in der sich nach dem Klick auf diesen Button die Webseite &amp;ldquo;github.com&amp;rdquo; mit dem &amp;ldquo;https&amp;rdquo; Protokoll geöffnet hat und geben Sie dann ihren Benutzernamen und Ihr Passwort ein.
Bestätigen Sie, dass GitHub Desktop in Ihrem Namen auf der GitHub Plattform agieren darf.
Nach der Bestätigung von dem darauf folgenden Dialog werden die zu GitHub Desktop zurück geleitet und können die Konfiguration von Git abschließen.</description></item><item><title>Fork anlegen</title><link>https://git-workshop.epages.works/collaboration/pull-request/2_github-fork/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/pull-request/2_github-fork/</guid><description>Der erste Schritt, um einen Pull Request ist es, sich einen Fork zu erstellen. Als Fork wird die Kopie des Projektes in Ihrem persönlichen GitHub Account bezeichnet.
GitHub Webseite Besuchen Sie die Projektseite und klicken Sie dann auf den &amp;ldquo;Fork&amp;rdquo; Button rechts oben auf der Webseite.
Wählen Sie in dem sich daraufhin öffnenden Dialog Ihren privaten GitHub Account als Ziel für den Fork aus.</description></item><item><title>Formular zum Anlegen</title><link>https://git-workshop.epages.works/setup-website/2_formular/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/setup-website/2_formular/</guid><description>Nach dem Einloggen auf der GitHub Webseite sieht man rechts oben ein Plus-Symbol. Wenn man dort drauf klickt öffnet sich ein Kontext-Menü, worin man dann &amp;ldquo;New repository&amp;rdquo; auswählen kann.
Daraufhin öffnet sich eine Seite mit einem Formlar zu den Details für das neue Repository.
Wichtig hierbei ist neben einem Name für das Repository, ob es öffentlich oder privat sein soll. Öffentlich heißt, jede/r der Ihr Profil auf der GitHub Webseite besucht kann es sehen.</description></item><item><title>git clone</title><link>https://git-workshop.epages.works/collaboration/pull-request/3_git-clone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/pull-request/3_git-clone/</guid><description>Nun können Sie sich eine Kopie von Ihrem Fork herunterladen. Dies wird im Kontext von Git als &amp;ldquo;clone&amp;rdquo; bezeichnet.
GitHub Webseite Nach der Erstellung des Forks hat sich automatisch dessen Seite auf github.com geöffnet. Wenn Sie die Seite direkt öffnen wollen, geben Sie in die Addresszeile Ihres Browsers nach &amp;ldquo;github.com&amp;rdquo; das Pfadelement mit ihrem Accountname an und dann als letztes Pfadelement den Projeknamen &amp;ldquo;git-workshop&amp;rdquo;.
z.B. https://github.com/mmustermann/git-workshop
Klicken Sie auf den grünen &amp;ldquo;Code&amp;rdquo; Button und kopieren Sie sich dann die angezeigte HTTPS Clone URL.</description></item><item><title>git commit</title><link>https://git-workshop.epages.works/collaboration/merge-conflicts/5_git-commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/merge-conflicts/5_git-commit/</guid><description>Nun können Sie einen neuen Commit erstellen, in dem die Information über Ihre Entscheidung zu der Auflösung des Merge Konflikt gespeichert wird.
GitHub Desktop Wenn Sie zurück zu GitHub Desktop gehen, wird es erkennen, dass der Merge Konflikt aufgelöst wurde. Sie können den Merge Commit erstellen, indem Sie auf den &amp;ldquo;Commit Merge&amp;rdquo; Button klicken.</description></item><item><title>git commit</title><link>https://git-workshop.epages.works/collaboration/pull-request/5_git-commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/pull-request/5_git-commit/</guid><description>Nun können Sie eine Änderung an den lokalen Dateien von dem Git Workshop Projekt machen und diese in das lokale Repository hinzufügen. Diese Aktion wird als &amp;ldquo;git commit&amp;rdquo; bezeichnet.
GitHub Desktop Auf der Übersichtsseite von dem Repository in GitHub Desktop macht Ihnen das Programm Vorschläge, was Sie als nächstes tun können. Einer der Vorschläge ist es, den Quelltext von dem Repository in dem von Ihnen genutzten Texteditor zu öffnen. In dem Beispiel Screenshot wird der Text Editor Atom genutzt.</description></item><item><title>git commit</title><link>https://git-workshop.epages.works/setup-website/6_git-commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/setup-website/6_git-commit/</guid><description>Gehen Sie nun zurück zu GitHub Desktop. Es wird Ihnen hier angezeigt welche Dateien sich geändert haben. Sie können nun auswählen, welche der Änderungen in den Commit beinhaltet sein sollen. In diesem Fall wollen wir alle Änderungen in den Commit packen, was die Voreinstellung ist.
Drücken Sie daher einfach auf den &amp;ldquo;Commit to main&amp;rdquo; Button, um den Commit zu erstellen.</description></item><item><title>git fetch</title><link>https://git-workshop.epages.works/collaboration/merge-conflicts/2_git-fetch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/merge-conflicts/2_git-fetch/</guid><description>Mit Hilfe von dem git fetch Befehl können Sie die Git zu den Remote Repositories bekannten Daten aktualisieren. Insbesondere muss nachgeschaut werden, was der letzte Commit auf dem &amp;ldquo;main&amp;rdquo; Branch in dem Upstream Repository (ePages-de/git-workshop ) ist.
GitHub Desktop Um den git fetch Befehl auszuführen, klicken Sie auf den &amp;ldquo;Fetch origin&amp;rdquo; Button in GitHub Desktop.</description></item><item><title>git merge</title><link>https://git-workshop.epages.works/collaboration/merge-conflicts/3_git-merge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/merge-conflicts/3_git-merge/</guid><description>Als nächstes müssen Sie Ihren lokalen Branch mit den neusten Änderungen auf dem &amp;ldquo;main&amp;rdquo; Branch des &amp;ldquo;upstream&amp;rdquo; Repository zusammenführen. Diese Aktion wird als &amp;ldquo;git merge&amp;rdquo; bezeichnet.
GitHub Desktop Klicken Sie dazu zunächst auf den Button für die Branch-Verwaltung. In dem sich öffnenden Menü, klicken Sie auf den Button ganz unten, um einen Branch in den aktuellen Branch hinein zu mergen. Wählen Sie in dem sich öffnenden Dialog den Branch &amp;ldquo;upstream/main&amp;rdquo; aus.</description></item><item><title>git push</title><link>https://git-workshop.epages.works/collaboration/merge-conflicts/6_git-push/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/merge-conflicts/6_git-push/</guid><description>Der letzte Schritt zur Lösung des Merge Konflikt ist es, die Änderungen von dem lokalen Branch auf den Branch in dem Remote Repository zu publizieren.
GitHub Desktop Drücken Sie dazu in GitHub Desktop auf den &amp;ldquo;Push origin&amp;rdquo; Button.</description></item><item><title>git push</title><link>https://git-workshop.epages.works/collaboration/pull-request/6_git-push/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/pull-request/6_git-push/</guid><description>Nach der Erstellung des Commits ist dieser erst einmal nur auf Ihrem lokalen Repository verfügbar. Einen Pull Request kann man jedoch nur von einem Remote Repository zu einem anderen Remote Repository stellen. Von daher muss der Branch mit dem Commit zu Ihrem Fork publiziert werden. Diese Aktion wird als &amp;ldquo;git push&amp;rdquo; bezeichnet.
GitHub Desktop Nun klicken Sie auf einen der &amp;ldquo;Publish branch&amp;rdquo; Buttons, um den lokal erstellten Branch mit dem neuen Commit zu ihrem Fork auf GitHub zu publizieren.</description></item><item><title>git push</title><link>https://git-workshop.epages.works/setup-website/7_git-push/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/setup-website/7_git-push/</guid><description>Nach der Erstellung des Commit zeigt Ihnen GitHub Desktop an, dass Ihr lokaler Branch einen Commit mehr hat, als der Branch den Sie remote auf GitHub haben.
Um diesen Commit dem remote Repository bekannt zu machen, müssen Sie den &amp;ldquo;git push&amp;rdquo; Befehl ausführen. GitHub Desktop macht diese einfach, indem Sie nur den &amp;ldquo;Push origin&amp;rdquo; Button dafür klicken brauchen.
Wenn Sie sich nun Ihr Repository auf GitHub anschauen, können Sie nun die von Ihnen neu erstellte Datei finden.</description></item><item><title>GitHub Pages einrichten</title><link>https://git-workshop.epages.works/setup-website/8_github-pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/setup-website/8_github-pages/</guid><description>Gehen Sie nun wieder zu der GitHub Webseite. Öffnen Sie dort das Repository. Navigieren Sie in dem Repository zu dem &amp;ldquo;Settings&amp;rdquo; Tab. Dort wählen Sie in den Menüpunkt &amp;ldquo;Pages&amp;rdquo; aus.
Aktivieren Um Ihre HTML-Datei mit GitHub Pages als Webseite zu publizieren, müssen Sie zuerst GitHub darüber informieren, in welchem Branch Ihre Webseite zu finden ist.
Danach muss konfiguriert werden, in welchem Order sich die HTML-Dateien befinden. Dies kann entwerden im Hauptverzeichnis des Repository sein (engl.</description></item><item><title>HTML Datei anlegen</title><link>https://git-workshop.epages.works/setup-website/5_datei-anlegen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/setup-website/5_datei-anlegen/</guid><description>Texteditor öffnen Öffen Sie nun den Dateisystem-Order mit dem geklonten Repository mit Ihrem Texteditor. GitHub Desktop hilft dabei, indem es auf der Startseite von dem Repository einen Button anbieten, um mit dem eingestellten Texteditor das Projekt zu öffnen.
Wenn der Texteditor welchen Sie benutzen wollen nicht hier erscheint, können Sie die Einstellung ändern, indem Sie auf den &amp;ldquo;Preferences&amp;rdquo; Link klicken und dann in dem sich öffnenden Dialog zu dem &amp;ldquo;Integrations&amp;rdquo; Tab wechseln.</description></item><item><title>Imprint</title><link>https://git-workshop.epages.works/imprint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/imprint/</guid><description> window.location.href = "https://epages.com/de/impressum"; Siehe https://epages.com/de/impressum</description></item><item><title>Kopieren von Clone URL</title><link>https://git-workshop.epages.works/setup-website/3_repo-details/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/setup-website/3_repo-details/</guid><description>Das Herunterladen von Git Repositories auf den lokalen Rechner wird als &amp;ldquo;clone&amp;rdquo; bezeichnet. Um dies im nächsten Schritt durchzuführen, kopieren Sie die &amp;ldquo;Clone URL&amp;rdquo; in den Zwischenspeicher, indem Sie auf der Repository-Hauptseite auf den grünen &amp;ldquo;Code&amp;rdquo; Button klicken (1), und danach auf das Kopier-Icon (2).</description></item><item><title>Merge Konflikt auflösen</title><link>https://git-workshop.epages.works/collaboration/merge-conflicts/4_solve-conflict/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/merge-conflicts/4_solve-conflict/</guid><description>Nun müssen Sie Git darüber in Kenntnis setzen, wie der Merge Konflikt aufgelöst werden kann.
GitHub Desktop Nach der Durchführung von dem git merge Befehl zeigt Ihnen GitHub Desktop, in welchen Dateien es zu einem Merge Konflikt gekommen ist. Es bietet Ihnen an, direkt diese Datei in Ihrem Text Editor zu öffnen, z.B. Atom.
Text Editor Merge Konflikt Markierung Wenn Git während des Merging einen Konflikt erkennt, dann fügt es an dieser Stelle sowohl die Version der Textstelle auf dem aktuellen Branch als auch die Version der Textstelle auf dem gemergten Branch ein.</description></item><item><title>Pull Request erstellen</title><link>https://git-workshop.epages.works/collaboration/pull-request/7_create-pr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/pull-request/7_create-pr/</guid><description>GitHub Webseite Wenn Sie nun Ihren Fork in der Weboberfläche öffnen, wird GitHub Sie über die Änderungen informieren und Ihnen auch dort anbieten einen Pull Request anzulegen.
Klicken Sie auf den &amp;ldquo;Compare &amp;amp; pull request&amp;rdquo; Button, überprüfen Sie die unten auf der Seite angezeigten Änderungen und bestätigen Sie dann die Pull Request Erstellung mit einem Klick auf &amp;ldquo;Create pull request&amp;rdquo;.
Nun ist Ihr Pull Request im &amp;ldquo;Pull requests&amp;rdquo; Tab des Hauptprojektes sichtbar und kann von den Projekt-Betreuern bearbeitet werden.</description></item><item><title>Pull Request mergen</title><link>https://git-workshop.epages.works/collaboration/code-reviews/5_merge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/code-reviews/5_merge/</guid><description>Wechseln Sie danach in das &amp;ldquo;Conversation&amp;rdquo; Tab in den Pull Request Details und scrollen Sie ganz nach unten. Dort können Sie dann über den &amp;ldquo;Merge pull request&amp;rdquo; Button den Pull Request in den Hauptzweig des Repositories mergen.</description></item><item><title>Pull Request öffnen</title><link>https://git-workshop.epages.works/collaboration/code-reviews/2_create-pr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/code-reviews/2_create-pr/</guid><description>Gehen Sie auf das Hauptprojekt und öffnen Sie dort das &amp;ldquo;Pull Requests&amp;rdquo; Tab.
https://github.com/ePages-de/technologie-nachrichten/pulls In den Details zu dem Pull Request, wechsel Sie zu dem &amp;ldquo;Files changed&amp;rdquo; Tab.</description></item><item><title>Review abschließen</title><link>https://git-workshop.epages.works/collaboration/code-reviews/4_review-submit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/code-reviews/4_review-submit/</guid><description>Wenn Sie mit Ihrem Review fertig sind, drücken Sie den Button rechts oben mit der Aufschrift &amp;ldquo;Finish your review&amp;rdquo;.
Bevor Sie den sich daraufhin öffnenden Dialog bestätigen, müssen Sie entscheiden ob Sie den Pull Request nur Kommentieren möchten, ob Sie den Pull Request genehmigen oder Änderungen anfordern wollen.
Der Autor des Pull Requests bekommt daraufhin von GitHub eine Email als Notifikation für Ihr Feedback.</description></item><item><title>Ticket anlegen</title><link>https://git-workshop.epages.works/collaboration/github-issues/3_ticket-anlegen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/github-issues/3_ticket-anlegen/</guid><description>Wenn Sie auf der Übersichtsseite der Tickets auf den grünen &amp;ldquo;New issue&amp;rdquo; Button klicken, bekommen Sie das folgende Formular angezeigt:
Um ein Ticket anzulegen müssen Sie in dem Eingabefeld &amp;ldquo;Title&amp;rdquo; eine Überschrift für die Aufgabe eintragen und dann auf den &amp;ldquo;Submit new issue&amp;rdquo; Button klicken. Zusätzlich ist eine Beschreibung der Aufgabe in dem Eingabefeld &amp;ldquo;Leave a comment&amp;rdquo; in den meisten fällen hilfreich, so dass jede/r an dem Projekt beteiligte versteht, was zu tun ist.</description></item><item><title>Ticket Übersicht</title><link>https://git-workshop.epages.works/collaboration/github-issues/2_liste/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://git-workshop.epages.works/collaboration/github-issues/2_liste/</guid><description>Wenn Sie das Git Workshop Projekt auf GitHub öffnen und dann auf das &amp;ldquo;Issues&amp;rdquo; Tab gehen, können Sie eine Liste mit den Aufgaben sehen, die hier noch anstehen:</description></item></channel></rss>